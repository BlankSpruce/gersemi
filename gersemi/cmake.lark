start: file

file          : (_file_element newline_or_gap)* _file_element
_file_element : command_element
              | non_command_element
              | block
              | preformatted_block

?command_element    : command_invocation [line_comment]
non_command_element : bracket_comment* [line_comment]

preformatted_block : DISABLE_FORMATTER PREFORMATTED_LINE* ENABLE_FORMATTER

?newline_or_gap : NEWLINE+

DISABLE_FORMATTER : "# gersemi: off"
ENABLE_FORMATTER  : "# gersemi: on"
PREFORMATTED_LINE : /(?:(?!( |\t)*# gersemi: on))( |\t|.)*\n/

block      : _foreach_block
           | _function_block
           | _if_block
           | _macro_block
           | _while_block
block_body : (newline_or_gap _file_element)* newline_or_gap

_foreach_block  : foreach_element  block_body endforeach_element
_function_block : function_element block_body endfunction_element

_if_block       : if_element       block_body [_alternatives] endif_element
_alternatives   : _elseif_clause* [_else_clause]
_elseif_clause  : elseif_element   block_body
_else_clause    : else_element     block_body

_macro_block    : macro_element    block_body endmacro_element
_while_block    : while_element    block_body endwhile_element

else_element        : else_command        [line_comment] -> command_element
elseif_element      : elseif_command      [line_comment] -> command_element
endforeach_element  : endforeach_command  [line_comment] -> command_element
endfunction_element : endfunction_command [line_comment] -> command_element
endif_element       : endif_command       [line_comment] -> command_element
endmacro_element    : endmacro_command    [line_comment] -> command_element
endwhile_element    : endwhile_command    [line_comment] -> command_element
foreach_element     : foreach_command     [line_comment] -> command_element
function_element    : function_command    [line_comment] -> command_element
if_element          : if_command          [line_comment] -> command_element
macro_element       : macro_command       [line_comment] -> command_element
while_element       : while_command       [line_comment] -> command_element

else_command        : else_term   _invocation_part -> command_invocation
elseif_command      : elseif      _invocation_part -> command_invocation
endforeach_command  : endforeach  _invocation_part -> command_invocation
endfunction_command : endfunction _invocation_part -> command_invocation
endif_command       : endif       _invocation_part -> command_invocation
endmacro_command    : endmacro    _invocation_part -> command_invocation
endwhile_command    : endwhile    _invocation_part -> command_invocation
foreach_command     : foreach     _invocation_part -> command_invocation
function_command    : function    _invocation_part -> command_invocation
if_command          : if_term     _invocation_part -> command_invocation
macro_command       : macro       _invocation_part -> command_invocation
while_command       : while_term  _invocation_part -> command_invocation

else_term   : ELSE
elseif      : ELSEIF
endforeach  : ENDFOREACH
endfunction : ENDFUNCTION
endif       : ENDIF
endmacro    : ENDMACRO
endwhile    : ENDWHILE
foreach     : FOREACH
function    : FUNCTION
if_term     : IF
macro       : MACRO
while_term  : WHILE

ELSE        : "else"i
ELSEIF      : "elseif"i
ENDFOREACH  : "endforeach"i
ENDFUNCTION : "endfunction"i
ENDIF       : "endif"i
ENDMACRO    : "endmacro"i
ENDWHILE    : "endwhile"i
FOREACH     : "foreach"i
FUNCTION    : "function"i
IF          : "if"i
MACRO       : "macro"i
WHILE       : "while"i

command_invocation  : IDENTIFIER _invocation_part
_invocation_part    : [_SPACE] LEFT_PARENTHESIS arguments RIGHT_PARENTHESIS
IDENTIFIER          : /[A-Za-z_][A-Za-z0-9_]*/
arguments           : (commented_argument | _separation)*
_separation         : _separation_atom+
_separation_atom    : bracket_comment
                    | [line_comment] NEWLINE

?commented_argument : argument [line_comment NEWLINE]
                    | argument [bracket_comment]

?argument : bracket_argument
          | quoted_argument
          | unquoted_argument
          | complex_argument

bracket_argument : /\[(?P<equal_signs>(=*))\[([\s\S]+?)\](?P=equal_signs)\]/

quoted_argument     : _QUOTATION_MARK QUOTED_ELEMENT* _QUOTATION_MARK
QUOTED_ELEMENT      : /([^\\\"]|\n)+/
                    | ESCAPE_SEQUENCE
                    | QUOTED_CONTINUATION
QUOTED_CONTINUATION : BACKSLASH NEWLINE

unquoted_argument : UNQUOTED_ARGUMENT
UNQUOTED_ARGUMENT : (UNQUOTED_ELEMENT [DOUBLE_QUOTED_STRING])+
UNQUOTED_ELEMENT  : /(?:(?!\[=*\[))[^\$\s\(\)#\"\\]+/
                  | /(?:(?!\[=*\[))[^\s\(\)#\"\\]/
                  | ESCAPE_SEQUENCE
                  | MAKE_STYLE_REFERENCE

MAKE_STYLE_REFERENCE : /\$\([^\)\n\"#]+?\)/
DOUBLE_QUOTED_STRING : /\"[^\n#]*?\"/

complex_argument : LEFT_PARENTHESIS arguments RIGHT_PARENTHESIS

ESCAPE_SEQUENCE: /\\([^A-Za-z0-9]|[nrt])/

bracket_comment : _POUND_SIGN bracket_argument
line_comment    : _POUND_SIGN [LINE_COMMENT_CONTENT]
LINE_COMMENT_CONTENT : /[^\n]+/

BACKSLASH              : "\\"
LEFT_PARENTHESIS       : "("
NEWLINE                : "\n"
_POUND_SIGN            : "#"
_QUOTATION_MARK        : "\""
RIGHT_PARENTHESIS      : ")"
_SPACE                 : /[ \t]+/

%ignore _SPACE