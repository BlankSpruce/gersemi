start: file

file          : (_file_element newline_or_gap)* _file_element
_file_element : command_element
              | non_command_element
              | block
              | preformatted_block

?command_element    : command_invocation [line_comment]
non_command_element : bracket_comment* [line_comment]

preformatted_block : DISABLE_FORMATTER PREFORMATTED_LINE* ENABLE_FORMATTER

?newline_or_gap : NEWLINE+

DISABLE_FORMATTER : "# gersemi: off"
ENABLE_FORMATTER  : "# gersemi: on"
PREFORMATTED_LINE : /(?:(?!( |\t)*# gersemi: on))( |\t|.)*\n/

block      : _foreach_block
           | _function_block
           | _if_block
           | _macro_block
           | _while_block
           | _block_block
block_body : (newline_or_gap _file_element)* newline_or_gap

terminal_as_rule{term}: term
command_template{term}: terminal_as_rule{term} _invocation_part -> command_invocation
element_template{term}: command_template{term} [line_comment] -> command_element

_block_template{start_term, end_term}: element_template{start_term} block_body element_template{end_term}
_block_block    : _block_template{BLOCK, ENDBLOCK}
_foreach_block  : _block_template{FOREACH, ENDFOREACH}
_function_block : _block_template{FUNCTION, ENDFUNCTION}

_if_block       : element_template{IF}     block_body [_alternatives] element_template{ENDIF}
_alternatives   : _elseif_clause* [_else_clause]
_elseif_clause  : element_template{ELSEIF} block_body
_else_clause    : element_template{ELSE}   block_body

_macro_block    : _block_template{MACRO, ENDMACRO}
_while_block    : _block_template{WHILE, ENDWHILE}

BLOCK       : "block"i
ELSE        : "else"i
ELSEIF      : "elseif"i
ENDBLOCK    : "endblock"i
ENDFOREACH  : "endforeach"i
ENDFUNCTION : "endfunction"i
ENDIF       : "endif"i
ENDMACRO    : "endmacro"i
ENDWHILE    : "endwhile"i
FOREACH     : "foreach"i
FUNCTION    : "function"i
IF          : "if"i
MACRO       : "macro"i
WHILE       : "while"i

command_invocation  : IDENTIFIER _invocation_part
_invocation_part    : [_SPACE] LEFT_PARENTHESIS arguments RIGHT_PARENTHESIS
IDENTIFIER          : /[A-Za-z_][A-Za-z0-9_]*/
arguments           : (commented_argument | _separation)*
_separation         : _separation_atom+
_separation_atom    : bracket_comment
                    | [line_comment] NEWLINE

?commented_argument : argument [(line_comment NEWLINE | bracket_comment)]

?argument : bracket_argument
          | quoted_argument
          | unquoted_argument
          | complex_argument

bracket_argument : /\[(?P<equal_signs>(=*))\[([\s\S]+?)\](?P=equal_signs)\]/

quoted_argument     : _QUOTATION_MARK QUOTED_ELEMENT* _QUOTATION_MARK
QUOTED_ELEMENT      : /([^\\\"]|\n)+/
                    | ESCAPE_SEQUENCE
                    | QUOTED_CONTINUATION
QUOTED_CONTINUATION : BACKSLASH NEWLINE

unquoted_argument : UNQUOTED_ARGUMENT
UNQUOTED_ARGUMENT : (UNQUOTED_ELEMENT [DOUBLE_QUOTED_STRING])+
UNQUOTED_ELEMENT  : /(?:(?!\[=*\[))[^\$\s\(\)#\"\\]+/
                  | /(?:(?!\[=*\[))[^\s\(\)#\"\\]/
                  | ESCAPE_SEQUENCE
                  | MAKE_STYLE_REFERENCE

MAKE_STYLE_REFERENCE : /\$\([^\)\n\"#]+?\)/
DOUBLE_QUOTED_STRING : /\"[^\n#]*?\"/

complex_argument : LEFT_PARENTHESIS arguments RIGHT_PARENTHESIS

ESCAPE_SEQUENCE: /\\([^A-Za-z0-9]|[nrt])/

bracket_comment : _POUND_SIGN bracket_argument
line_comment    : _POUND_SIGN [LINE_COMMENT_CONTENT]
LINE_COMMENT_CONTENT : /[^\n]+/

BACKSLASH              : "\\"
LEFT_PARENTHESIS       : "("
NEWLINE                : "\n"
_POUND_SIGN            : "#"
_QUOTATION_MARK        : "\""
RIGHT_PARENTHESIS      : ")"
_SPACE                 : /[ \t]+/

%ignore _SPACE