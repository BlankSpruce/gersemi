from typing import Any, Callable, List, Protocol
from lark import Tree

class Transformer:
    def __init__(self, visit_tokens: bool = ...):
        "docstring"

    def visit(self, tree: Tree): ...
    def __mul__(self, other: TransformerChain) -> TransformerChain: ...

class Transformer_InPlace(Transformer): ...

class TransformerChain(Transformer):
    def __init__(self, *transformers: Transformer): ...
    def transform(self, tree: Tree) -> Tree: ...
    def __mul__(self, other: TransformerChain) -> TransformerChain: ...

class Interpreter:
    def visit(self, tree: Any) -> Any: ...
    def visit_children(self, tree: Tree) -> Any: ...

v_args: Callable[..., Callable[[Callable], Callable]]
